doctype html
html(lang="en")
	head
		include partials/header.pug
		link(rel ='stylesheet', href="cashier.css", type='text/css')
		script(src="https://use.fontawesome.com/1d07c7b3d1.js")
		//- script(src="/messenger-api-helpers/messages/menuItems.js")
	body

		- function displayName(item) { if (item.itemType === 'burger') { console.log(item.itemName); return item.itemName; } console.log(item.itemName); var name = item.itemName.replace( /([A-Z])/g, " $1" ); name = name.charAt(0).toUpperCase() + name.slice(1); if (item.itemName === 'fries') { var size = item.itemSize.charAt(0).toUpperCase() + item.itemSize.slice(1); name = size + ' ' + name; } console.log(name); return name; }
		nav(style="height: 60px, background-color: rgb(78, 86, 101)")
			.client_name
				img(src="logo.jpg")
				span burger burger
			.tab COMING SOON
			.vr
			.tab COMING SOON
		div
			section
				.title
					span New
				.container
					each order in orders
						unless order.isInputted
							if order.isPaid
								div.order(orderId=order._id)
									- const display_id = order.orderNumber;
									.top 
										.id
											span.heavy ID: 
											span.light #{display_id} 
										.address
											- var total = ((order.basePrice + order.tax + order.stripeFee +  order.deliveryFee) / 100).toFixed(2);
											span.heavy $#{total}
									.middle
										- let counter = 0;
										each item in order._items
											
											- counter++;

											if item.itemType == "burger"

												.item #{counter}. #{item.itemName}
												- const mods = findDifferentItemsOnBurger(item);

												//- burger modifications
												each topping in mods.plusToppings
													.plus + #{topping}
												if mods.pattyDifference > 0
													- let counter = 1
													while counter <= mods.pattyDifference 
														.plus + Patty
														- counter++
												each topping in mods.minusToppings
													.minus – #{topping}
												if mods.pattyDifference < 0
													- let counter = -1
													while counter >= mods.pattyDifference
														.minus – Patty
														- counter--

												//- get combo
												if item.itemCombo
													each inner_item in order._items
														if ((item._link.equals(inner_item._link)) && (item._order.equals(inner_item._order)) && !(item._id.equals(inner_item._id)))
															.combo w/ #{inner_item.itemName}

											else

												//- if not part of combo
												unless item.itemCombo
													.item #{counter}. #{item.itemName}

									.bottom
										button(value="cooking") Cooking

			section
				.title
					span Cooking
				.container
					each order in orders
						if order.isInputted
							unless order.isReady
								if order.isPaid
									div.order(orderId=order._id)
										- const display_id = order.orderNumber;
										.top 
											.id
												span.heavy ID: 
												span.light #{display_id} 
											.address
												- var total = ((order.basePrice + order.tax + order.stripeFee +  order.deliveryFee) / 100).toFixed(2);
												span.heavy $#{total}
										.middle
											- let counter = 0;
											each item in order._items
												
												- counter++;

												if item.itemType == "burger"

													.item #{counter}. #{item.itemName}
													- const mods = findDifferentItemsOnBurger(item);

													//- burger modifications
													each topping in mods.plusToppings
														.plus + #{topping}
													if mods.pattyDifference > 0
														- let counter = 0
														while counter <= mods.pattyDifference 
															.plus + Patty
															- counter++
													each topping in mods.minusToppings
														.minus – #{topping}
													if mods.pattyDifference < 0
														- let counter = 0
														while counter >= mods.pattyDifference
															.minus – Patty
															- counter--

													//- get combo
													if item.itemCombo
														each inner_item in order._items
															if ((item._link.equals(inner_item._link)) && (item._order.equals(inner_item._order)) && !(item._id.equals(inner_item._id)))
																.combo w/ #{inner_item.itemName}

												else

													//- if not part of combo
													unless item.itemCombo
														.item #{counter}. #{item.itemName}

										.bottom
											button(value="new") New
											button(style="display: none", value="ready") Ready

			section(style="display: none")
				.title
					span Ready
				.container
					each order in orders
						if order.isReady
							if order.isPaid
								div.order(orderId=order._id)
									- const display_id = order.orderNumber;
									.top 
										.id
											span.heavy ID: 
											span.light #{display_id} 
										.address
											- var total = ((order.basePrice + order.tax + order.stripeFee +  order.deliveryFee) / 100).toFixed(2);
											span.heavy $#{total}
									.middle
										- let counter = 0;
										each item in order._items
											
											- counter++;

											if item.itemType == "burger"

												.item #{counter}. #{item.itemName}
												- const mods = findDifferentItemsOnBurger(item);

												//- burger modifications
												each topping in mods.plusToppings
													.plus + #{topping}
												if mods.pattyDifference > 0
													- let counter = 0
													while counter <= mods.pattyDifference 
														.plus + Patty
														- counter++
												each topping in mods.minusToppings
													.minus – #{topping}
												if mods.pattyDifference < 0
													- let counter = 0
													while counter >= mods.pattyDifference
														.minus – Patty
														- counter--

												//- get combo
												if item.itemCombo
													each inner_item in order._items
														if ((item._link.equals(inner_item._link)) && (item._order.equals(inner_item._order)) && !(item._id.equals(inner_item._id)))
															.combo w/ #{inner_item.itemName}

											else

												//- if not part of combo
												unless item.itemCombo
													.item #{counter}. #{item.itemName}

									.bottom
										button(value="cooking") Cooking

			.mobile Mobile view still in development. Please use a tablet or computer.

		script.
			$("button").on("click", function(){
				const column   = $(this).attr("value");
				let id         = $(this).closest(".order").attr("orderId");
				let isInputted = null;
				let isReady 	 = null;
				switch (column) {
					case "new":
						isInputted = 0;
						isReady = 0;
						break;		
					case "cooking":
						isInputted = 1;
						isReady = 0;
						break;		
					case "ready":
						isInputted = 1;
						isReady = 1;
						break;
				}
				$.post("cashier", {
					id,
					isInputted,
					isReady
				}).done(function(e){
					location.reload();
				})
			})





