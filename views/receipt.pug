doctype html
html(lang="en")

	head
		title Burger
		meta(name="viewport", content="width=device-width, initial-scale=1")
		link(href="https://fonts.googleapis.com/css?family=Lato:300,400" rel="stylesheet")
		link(rel ='stylesheet', href="normalize.css", type='text/css')
		link(rel ='stylesheet', href="receipt.css", type='text/css')
		script(src="https://use.fontawesome.com/1d07c7b3d1.js")
		script(src="https://code.jquery.com/jquery-1.11.3.min.js")
		script(src="ajaxSubmit.js")
		script(src='https://checkout.stripe.com/checkout.js')
		script(src="https://cdnjs.cloudflare.com/ajax/libs/jquery.inputmask/3.3.4/inputmask/inputmask.js")
		script(src='https://cdnjs.cloudflare.com/ajax/libs/jquery.inputmask/3.3.4/inputmask/jquery.inputmask.js')
	body
		script.
			// code to connect to the extension necessary to close this view
			(function(d, s, id){
				var js, fjs = d.getElementsByTagName(s)[0];
				if (d.getElementById(id)) {return;}
				js = d.createElement(s); js.id = id;
				js.src = "//connect.facebook.com/en_US/messenger.Extensions.js";
				fjs.parentNode.insertBefore(js, fjs);
			}(document, 'script', 'Messenger'));

		form#form1(style="position:relative;", method="post", action="delete")
			input(type="hidden", name="orderId", value=order._id)
			.errors
			h4 RECEIPT
			.items
				- counter = 1;
				each item in order._items	
					if item.itemType == "burger"
						.item #{counter}. #{item.itemName}
							span.price ($#{item.price/100})
							span.actions(mongoId=item._id, type="burger")
								i.fa.fa-pencil(aria-hidden="true")
								i.fa.fa-times-circle(aria-hidden="true")
						- counter++;
						if item.itemCombo
							- let side = ""
							- let drink = ""
							each inner_item in order._items
								if ((item._link.equals(inner_item._link)) && (item._order.equals(inner_item._order)) && (inner_item.itemType == "side"))
									- side = inner_item;
								if ((item._link.equals(inner_item._link)) && (item._order.equals(inner_item._order)) && (inner_item.itemType == "drink"))
									- drink = inner_item;
							.combo w/ #{side.itemName} & #{drink.itemName}
								span.price ($#{(side.price + drink.price)/100})
								span.actions(drinkId=item._id, sideId=side._id, type="combo")
									i.fa.fa-pencil(aria-hidden="true")
									i.fa.fa-times-circle(aria-hidden="true")

					else
						unless item.itemCombo
							.item #{counter}. #{item.itemName}
								span.price ($#{item.price/100})
								span.actions(sideId=item._id, type="item")
									i.fa.fa-times-circle(aria-hidden="true")
							- counter++;
			.prices
				p#base
				p#delivery_stripe
				p#tax
				p#total
			button Confirm

		form#form2(style="display:none;", method="post", action="confirm")
			input(type="hidden", name="orderId", value=order._id)
			.errors
			p#final_total
			.inputs
				input(name="address", type="text", placeholder="Address")
				input(name="phoneNumber", type="text", placeholder="Phone")
				input(name="room", type="text", placeholder="Room Number (Optional)")
			button Pay Now

		script.
			const order_id = !{JSON.stringify(order._id)}
			const handler = StripeCheckout.configure({
				key: 'pk_test_tetHRTsQOph2yuOSaHGZG3pZ',
				image: 'https://stripe.com/img/documentation/checkout/marketplace.png',
				locale: 'auto',
				currency: "CAD",
				token: function(token) {
					$("#form2").append("<input type='hidden' name='token_id' value='" + token.id + "'>");
					$("#form2").append("<input type='hidden' name='token_email' value='" + token.email + "'>");
					$("#form2").append("<input type='hidden' name='authorized_payment' value='2000'>");
					$("#form2").ajaxSubmit();
					closeWebview();
				}
			});

			$(".fa-pencil").on("click", function(){
				// get mongo id of burger (or side, if not a combo)
				const id = $(this).parent().attr("mongoId");
				//- editView(id);
			})

			function smartDelete(ids) {
				return new Promise(function(resolve, reject){
					$.post("/delete", {
						ids
					}).done(function(success){
						resolve(success);
					}).fail(function(failure){
						reject(failure);
					})
				})
			}

			$(".fa-times-circle").on("click", function(){
				const id 	 = $(this).parent().attr("mongoId");
				const type = $(this).parent().attr("type");
				switch(type) {
					case "item": // delete only this item
						deleteItem(id).then(function(result){
							return getOrder(order_id);
						}).then(function(order){
							updateReceipt(order);
						}).catch(function(error) {

						})
						break;
					case "combo": // delete the burger's combo
						deleteCombo(id).then(function(result){
							return getOrder(order_id);
						}).then(function(order){
							updateReceipt(order);
						})
						break;
					case "burger": // delete the burger (and combo, if applicable)
						deleteBurger(id).then(function(result){
							return getOrder(order_id);
						}).then(function(order){
							updateReceipt(order);
						})
						break;
				}
			})

			$("#form1 button").on("click", function(e){
				("#form1").hide();
				$("#form2").show();
			})

			$("#form2 button").on("click", function(e){
				e.preventDefault();
				$("#form2").hide();
				handler.open({
					name: 'FoodBot',
					description: 'Your Order',
					zipCode: true,
					amount: 2000
				})
			})

			// VALIDATIONS
				// address only
				function checkAddress() {
					return new Promise((resolve, reject) => {
						$.get(
						  "/address",
						  { address: address }
						)
							.done(function(result) {
								resolve(result); // result: true, false or error object
							})
							.fail(function(error) {
								reject(error)
							})
					})
				}

				// not address
				function Validations(address) {
					return new Promise((resolve, reject) => {
						let room = $("input[name='room']").text();
						let phoneNumber = $("input[name='phoneNumber']").text();
						if (address === false) {
							reject("The address is outside of range");
						} else if ((address !== true) && (address !== false)) {
							reject("The addres is invalid");
						} else if (isNan(room)) {
							reject("The room number is not a number");
						} else if (isNan(phoneNumber)) {
							reject("The phone number is not a number");
						} else if (phoneNumber <= 1000000000) {
							reject("Must enter a phone number");
						} else {
							resolve(true);					
						}
					})
				}

			// DELETE
				// burger & combo items
				function deleteBurger(itemId) {
					return new Promise((resolve, reject) => {
						$.post("/deleteburger/" + itemId)
							.done(function(result) {
								resolve(result)
							})
							.fail(function(error) {
								reject(error);
							})
					});	
				}

				// combo items
				function deleteCombo(burgerId) {
					return new Promise((resolve, reject) => {
						$.post("/deletecombo/" + burgerId)
							.done(function(result) {
								resolve(result)
							})
							.fail(function(error) {
								reject(error);
							})
					})
				}

				// solo item
				function deleteItem(itemId) {
					return new Promise((resolve, reject) => {
						$.post("/deleteitem/" + itemId)
							.done(function(result) {
								resolve(result)
							})
							.fail(function(error) {
								reject(error);
							})
					});	
				}

			// EDIT

				// edit 

				// NOTE: no edit item yet, only delete




				// OTHER
				function closeWebview() {
					MessengerExtensions.requestCloseBrowser(function success() {
						console.log("Webview closed");
					}, function error(err) {
						console.log(err);
					});
				}

			

			// gets the order
			function getOrder(id) {
				return new Promise((resolve, reject) => {
					$.get("/getorder/" + id)
						.done(function(order) {
							resolve(order);
						})
						.fail(function(error) {
							reject(error);
						})
				})
			}

			// deletes burger and combo items if applicable
			

			// deletes the combo items from the burger
			// NOTE: add a visual element
			

			

			

			// HELPER: convert integer to cents to standard price format
			function displayPrice(price) {
				return ("$ " + (price / 100).toFixed(2));
			}

			// gets the order, then the price
			function loadPrices(order) {
				$("#base").text(displayPrice(order.basePrice));																 // base
				$("#delivery_stripe").text(displayPrice(order.stripeFee + order.deliveryFee)); // delivery + stripe
				$("#tax").text(displayPrice(order.tax));																			 // tax
				$("#total").text(displayPrice(order.basePrice + order.stripeFee + order.deliveryFee + order.tax))
				$("#final_total").text(displayPrice(order.basePrice + order.stripeFee + order.deliveryFee + order.tax))
			}

			$(document).ready(function(){

				// if they already paid, close the webview (isConfirmed)

				// determine prices
				//- loadPrices();

				// format the phone number
				$("#postal").inputmask("(999)999-9999");
			})