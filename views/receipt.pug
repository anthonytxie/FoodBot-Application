doctype html
html(lang="en")

	head
		title Burger
		meta(name="viewport", content="width=device-width, initial-scale=1")
		link(href="https://fonts.googleapis.com/css?family=Lato:300,400" rel="stylesheet")
		link(rel ='stylesheet', href="receipt.css", type='text/css')
		script(src="https://code.jquery.com/jquery-1.11.3.min.js")
		script(src="dragend-master/dragend.js")
		script(src="form.js")
		script(src='https://checkout.stripe.com/checkout.js')

	body
		script.
			// code to connect to the extension necessary to close this view
			(function(d, s, id){
				var js, fjs = d.getElementsByTagName(s)[0];
				if (d.getElementById(id)) {return;}
				js = d.createElement(s); js.id = id;
				js.src = "//connect.facebook.com/en_US/messenger.Extensions.js";
				fjs.parentNode.insertBefore(js, fjs);
			}(document, 'script', 'Messenger'));

		- const items = order._items; // all items in the order
		- let index = 0;

		form#view1container(style="position:relative;", method="post", action="delete")

		

			h4 RECEIPT
			input(type="hidden", name="orderId", value=order._id)

			- let order_price = 0;

			while index < items.length
				- let item = items[index];  // loop through each item in the list
				- let name = item.itemName; // name of current item
				- let combo_price = item.price; // equal to the price of the item or combo, if applicable

				- let combo = "";
				if item.itemType === "burger"
					if index <= items.length - 3
						if items[index + 1].itemCombo === true
							- combo = "(Combo)"
							- combo_price = combo_price + items[index + 1].price + items[index + 2].price

				- order_price += combo_price;

				span
					input(toggle_input=index, type="hidden", name="keepIds[]", value=item._id)
					.wide_checkbox
						.custom_check_on(toggle=index)
						.toggle
							h3 #{item.itemName} #{combo}
						p.price #{combo_price.toFixed(2)}

					if item.itemType === "burger"
						.zoom(value=item._id, style="display:none")
							- let toppings = item.standardToppings.concat(item.premiumToppings)
							each topping in toppings
								.topping= topping
							
							if combo == "(Combo)"
								- let combo_drink = undefined; // find the drink and side that are part of this combo
								- let combo_side = undefined;
								if items[index + 1] === "drink"
									- combo_drink = items[index + 1];
									- combo_side = items[index + 2];
								else
									- combo_side = items[index + 1];
									- combo_drink = items[index + 2];

									- price	+= combo_drink.price; // add the drink to the delete id list
									.drink= combo_drink.itemName
									.price= combo_drink.price
									input(toggle_input=index, name="keepIds[]", value=combo_drink._id)

									- price	+= combo_side.price; // add the side to the delete id list
									.side= combo_side.itemName
									.price= combo_side.price
									input(toggle_input=index, name="keepIds[]", value=combo_side._id)

								- index += 2; // this is so we don't enter drinks and sides twice
				- index++;
				
			div.list_prices
				p#base
				p#delivery_stripe
				p#tax
				p#order_total

			button.view1button.doneview1(style="position:absolute; bottom:0;") Confirm

		//- VIEW 2
		form#view2container(style="display:none;", method="post", action="confirm")

			input(type="hidden", name="orderId", value=order._id)

			.errors(style="color: red; text-align: center; margin-top:10px; width: 100%;")

			p#get_total

			input#address(name="address", type="text", placeholder="Address")
			input#postal(name="postal", type="text", placeholder="Postal Code")
			input(name="room", type="text", placeholder="Room Number (Optional)")

			.pay_row
				input.doneview2(style="-webkit-appearance: none;", type="submit", value="Pay Now")

		script.

			// could just take in a single "cost object"
			function update_cost(base, delivery_stripe, tax, total) {
				$("#base").html("Order Total: #{base}");
				$("#delivery_stripe").html("Delivery: #{delivery_stripe}");
				$("#tax").html("Tax: #{tax}");
				$("#order_total").html("Order Total: #{total}");
			}

			//- // add & remove handling for receipt view
			//- $("form").on("click", ".wide_checkbox", function() {

			//- 	let on  = $(this).children(".custom_check_on");
			//- 	let off = $(this).children(".custom_check_off");

			//- 	// remove
			//- 	if (on.length) {

			//- 	// add
			//- 	} else if (off.length) {

			//- 		checkbox = 

			//- 	}
			//- })

			// add to deleteIds
			$("form").on("click", ".custom_check_on", function() {
				const toggle = $(this).attr("toggle");

				// get the cost so that we can remove it from the total
				const price = parseFloat($(this).parent().find(".price").text()).toFixed(2);
				const old_subtotal = parseFloat($("#original_total").text().substr(13)).toFixed(2);
				const new_subtotal = (parseFloat(old_subtotal) - parseFloat(price)).toFixed(2);
				const tax = parseFloat((new_subtotal * 0.13)).toFixed(2)
				const stripeFees = (((parseFloat(new_subtotal) + (parseFloat(tax))) * (0.029)) + 0.3).toFixed(2)
				const total = (parseFloat(new_subtotal) + parseFloat(tax) + parseFloat(stripeFees)).toFixed(2)

				$("#original_total").text("Order Total: " + new_subtotal);
				$("#tax_total").text("Tax: " + tax);
				$("#stripe_fees").text("Stripe Fee: " + stripeFees);
				$("#order_total").text("Total: " + total);

				$("input[toggle_input=" + toggle + "]").prop("name", "removeIds[]");
				$(this).removeClass("custom_check_on");
				$(this).addClass("custom_check_off");
			})

			// remove from deleteIds
			$("form").on("click", ".custom_check_off", function(){
				const toggle = $(this).attr("toggle");

				// get the cost so that we can remove it from the total
				const price = parseFloat($(this).parent().find(".price").text()).toFixed(2);
				const old_subtotal = parseFloat($("#original_total").text().substr(13)).toFixed(2);
				const new_subtotal = (parseFloat(old_subtotal) + parseFloat(price)).toFixed(2);
				const tax = parseFloat((new_subtotal * 0.13)).toFixed(2)
				const stripeFees = (((parseFloat(new_subtotal) + (parseFloat(tax))) * (0.029)) + 0.3).toFixed(2)
				const total = (parseFloat(new_subtotal) + parseFloat(tax) + parseFloat(stripeFees)).toFixed(2)

				$("#original_total").text("Order Total: " + new_subtotal);
				$("#tax_total").text("Tax: " + tax);
				$("#stripe_fees").text("Stripe Fee: " + stripeFees);
				$("#order_total").text("Total: " + total);

				$("input[toggle_input=" + toggle + "]").prop("name", "keepIds[]");
				$(this).removeClass("custom_check_off");
				$(this).addClass("custom_check_on");
			})

			// does a get request on the otder, does stuff with the price
			const get_price = (order) => {
				const order_id = order._id;
				console.log("get_price triggered");
				$.get("/getorder/" + order_id).done(function(get_order){
					const get_order_price = parseFloat(get_order.orderPrice).toFixed(2);
					const get_tax = parseFloat(get_order.orderPrice * .13).toFixed(2);
					const get_stripe = parseFloat((get_order.orderPrice * 1.13) * .029 + .3).toFixed(2);
					pay_total = parseFloat((get_order.orderPrice * 1.13) * 1.029 + .3).toFixed(2);

					// close window if order is now empty
					if (Math.round(get_order_price) == 0) {
						MessengerExtensions.requestCloseBrowser(function success() {
							console.log("success");
						}, function error(err) {
							console.log(err);
						});
					}
					// round to 2 decimal places
					$("#get_order_price").html(get_order_price);
					$("#get_tax").html(get_tax);
					$("#get_stripe").html(get_stripe);
					$("#get_total").html("Total: $" + pay_total);
					$("#view2container").append("<input type='hidden' name='authorized_payment' value='" + pay_total * 100 + "'>")
				}, "json");
			}

			// click confirm button
			$(".doneview1").click(function(e){
				e.preventDefault();
				// TODO: add logic here
				$("#view1container").ajaxSubmit();
				$("#view1container").hide();
				get_price(!{JSON.stringify(order)});
				$("#view2container").show();
			})

			// amount they have to pay
			let pay_total = null;

			var handler = StripeCheckout.configure({
				key: 'pk_test_tetHRTsQOph2yuOSaHGZG3pZ',
				image: 'https://stripe.com/img/documentation/checkout/marketplace.png', // use personal image
				locale: 'auto',
				currency: "CAD",
				token: function(token) {
					console.log("this is when something happens with token");
					$("#view2container").append("<input type='hidden' name='token_id' value='" + token.id + "'>");
					$("#view2container").append("<input type='hidden' name='token_email' value='" + token.email + "'>");

					// address validations
					if ($("#address").val() == "") {
						$(".errors").text("Enter an address");
					} else if ($("#postal").val() == "") {
						$(".errors").text("Enter a postal code");

					// passes validations
					} else {
						$("#view2container").hide();
						$("#view2container").ajaxSubmit();
						MessengerExtensions.requestCloseBrowser(function success() {
							console.log("success");
						}, function error(err) {
							console.log(err);
						});
					}
				}
			});

			// either closes the session or brings up the payment prompt
			$(".doneview2").click(function(e){
				// this was sending twice
				e.preventDefault();
				
				if ($(this).val() == "Pay Now") {
					console.log("b");
					handler.open({
						name: 'FoodBot',
						description: 'Your Order',
						zipCode: true,
						amount: pay_total * 100
					})
					
				} else {
					console.log("pay later");
					console.log($("input[name=method]").val());
					if ($("input[name=method]").val() == "delivery") {
						if ($("#address").val() == "") {
							console.log("pay later, no address")
							$(".errors").text("Enter an address");
						} else if ($("#postal").val() == "") {
							$(".errors").text("Enter a postal code");
						} else {
							$("#view2container").hide();
							$("#view2container").ajaxSubmit();
							MessengerExtensions.requestCloseBrowser(function success() {
								console.log("success");
							}, function error(err) {
								console.log(err);
							});
						}
					} else {
						$("#view2container").hide();
						$("#view2container").ajaxSubmit();
						MessengerExtensions.requestCloseBrowser(function success() {
							console.log("success");
						}, function error(err) {
							console.log(err);
						});
					}
				}
			})

			// useful?
			// view 3
			window.addEventListener('popstate', function() { // close checkout on page navigation
				handler.close();
			});

			// called when MessengerExtensions is done loading
			window.extAsyncInit = function() {
				$("#view3button").click(function(){
					MessengerExtensions.requestCloseBrowser(function success() {
						console.log("success");
					}, function error(err) {
						console.log(err);
					});
				})
			}

		if order.isConfirmed
			script.
				$(document).ready(function(){
					setTimeout(function(){
						MessengerExtensions.requestCloseBrowser(function success() {
							console.log("success");
						}, function error(err) {
							console.log(err);
						});
					}, 100);
				})
				
