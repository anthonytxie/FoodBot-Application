doctype html
html(lang="en")

	head
		title Burger
		meta(name="viewport", content="width=device-width, initial-scale=1")
		link(href="https://fonts.googleapis.com/css?family=Lato:300,400" rel="stylesheet")
		link(rel ='stylesheet', href="normalize.css", type='text/css')
		link(rel ='stylesheet', href="receipt.css", type='text/css')
		script(src="https://use.fontawesome.com/1d07c7b3d1.js")
		script(src="https://code.jquery.com/jquery-1.11.3.min.js")
		script(src="ajaxSubmit.js")
		script(src='https://checkout.stripe.com/checkout.js')
		script(src="https://cdnjs.cloudflare.com/ajax/libs/jquery.inputmask/3.3.4/inputmask/inputmask.js")
		script(src='https://cdnjs.cloudflare.com/ajax/libs/jquery.inputmask/3.3.4/inputmask/jquery.inputmask.js')
	body
		form#form1(style="position:relative;", method="post", action="delete")
			input(type="hidden", name="orderId", value=order._id)
			.errors
			h4 YOUR ORDER
			.items
				- counter = 1;
				each item in order._items
					- let side = ""
					- let drink = ""
					if item.itemType == "burger"

						if item.itemCombo
							each inner_item in order._items
								if ((item._link.equals(inner_item._link)) && (item._order.equals(inner_item._order)) && (inner_item.itemType == "side"))
									- side = inner_item;
								if ((item._link.equals(inner_item._link)) && (item._order.equals(inner_item._order)) && (inner_item.itemType == "drink"))
									- drink = inner_item;

						.item #{counter}. #{item.itemName}
							.right
								if item.itemCombo
									.price $#{(item.price+side.price + drink.price)/100}
								else
									.price $#{(item.price)/100}
								.actions(name=item.itemName, burgerId=item._id, combo=`${item.itemCombo}`, type="burger", linkId=item._link)
									.edit
										i.fa.fa-pencil(aria-hidden="true")
										//- span Edit
									.delete
										i.fa.fa-trash(aria-hidden="true")
										//- span Delete
						- counter++;
						
						if item.itemCombo
							.combo â€¢ #{side.itemName} & #{drink.itemName}
								.right
									//- .price $#{(side.price + drink.price)/100}
									.actions(name="#{item.itemName}" drinkId=item._id, sideId=side._id, linkId=item._link, type="combo")
										.edit
											i.fa.fa-pencil(aria-hidden="true")
											//- span Edit
										.delete
											i.fa.fa-trash(aria-hidden="true") 
											//- span Delete

					else
						unless item.itemCombo
							.item #{counter}. #{item.itemName}
								.right
									.price $#{item.price/100}
									.actions(sideId=item._id, type="item")
										.delete
											i.fa.fa-trash(aria-hidden="true")
											//- span Delete
							- counter++;
			.prices
				#base 
					.header Price: 
					.number &nbsp$#{((order.basePrice)/100).toFixed(2)}
				#delivery_stripe 
					.header Delivery: 
					.number &nbsp$#{((order.stripeFee + order.deliveryFee)/100).toFixed(2)}
				#tax
					.header Tax: 
					.number &nbsp$#{((order.tax)/100).toFixed(2)}
				#total 
					.header Total: 
					.number &nbsp$#{((order.basePrice + order.stripeFee + order.deliveryFee + order.tax)/100).toFixed(2)}
			.button_container
				button CONFIRM

		form#form2(style="display:none;", method="post", action="confirm")
			input(type="hidden", name="orderId", value=order._id)
			.errors
			//- p#final_total $ #{((order.basePrice + order.stripeFee + order.deliveryFee + order.tax)/100).toFixed(2)}
			.inputs
				.input
					p Address
					input(name="address", type="text", placeholder="123 Baker Street")
				.input
					p Phone Number
					input(name="phoneNumber", type="text", placeholder="(123) 456-7890")
				.input
					p Room Number (Optional)
					input(name="roomNumber", type="text", placeholder="123")
			.button_container
				button 
					span PAY NOW
					span#final_total

		script.

			// close setup
			(function(d, s, id){
				var js, fjs = d.getElementsByTagName(s)[0];
				if (d.getElementById(id)) {return;}
				js = d.createElement(s); js.id = id;
				js.src = "//connect.facebook.com/en_US/messenger.Extensions.js";
				fjs.parentNode.insertBefore(js, fjs);
			}(document, 'script', 'Messenger'));
			// stripe setup
			const handler = StripeCheckout.configure({
				key: 'pk_test_tetHRTsQOph2yuOSaHGZG3pZ',
				image: 'logo.jpg',
				locale: 'auto',
				currency: "CAD",
				token: function(token) {
					$("#form2").append("<input type='hidden' name='token_id' value='" + token.id + "'>");
					$("#form2").append("<input type='hidden' name='token_email' value='" + token.email + "'>");
					$("#form2").ajaxSubmit();
					closeWebview();
				}
			});

			// constants
			const orderId = !{JSON.stringify(order._id)}
			const order_paid = !{JSON.stringify(order.isPaid)}
			const sender = !{JSON.stringify(order._user.PSID)}

			// call this to add a ton of food to your order
			function secret() {
				$.post("addMassiveOrder", {
					orderId,
					senderId: sender
				})
			}

			// edit
			$(".edit").on("click", function(){
				const actions = $(this).parent();
				const type = actions.attr("type");
				const linkId = actions.attr("linkId");
				console.log("linkid sent:");
				console.log(linkId);
				switch (type) {
					case "burger":
						const name = actions.attr("name");
						window.location = `/burger?name=${name}&sender=${sender}&linkId=${linkId}&receipt=1`;
						break;
					case "combo":
						window.location = `/combo?sender=${sender}&linkId=${linkId}&receipt=1?`;
						break;
				}
			})


			// delete
			function smartDelete(itemIds) {
				return new Promise(function(resolve, reject){
					$.ajax({
					  method: "POST",
					  url: "delete",
					  data: { 
					  	itemIds,
					  	orderId
					  }
					}).done(function(success){
						resolve(success);
					}).fail(function(failure){
						reject(failure);
					})
				})
			}
			$(".delete").on("click", function(){
				
				const actions = $(this).parent();
				const type = actions.attr("type");
				let ids = [];

				switch(type) {
					case "item": // delete only this item
						ids.push(actions.attr("sideId"));
						break;
					case "combo": // delete the burger's combo
						ids.push(actions.attr("drinkId"));
						ids.push(actions.attr("sideId"));
						break;
					case "burger": // delete the burger (and combo, if applicable)
						ids.push(actions.attr("burgerId"));
						console.log(actions.attr("combo"));
						if (actions.attr("combo")){
							console.log("combo should be deleted");
							comboIds = actions.closest(".item").next(".combo").children(".actions");
							ids.push(comboIds.attr("drinkId"));
							ids.push(comboIds.attr("sideId"));
						}
						break;
				}
				smartDelete(ids).then(function(result) {
					//- 	return getOrder(orderId);
					//- }).then(function(order) {
						// this should be ajax
						location.reload();
					}).catch(function(error) {
						$("#form1").children(".errors").text("Whoops! There was an error deleting that item.");
					})
			})

			// button logic
			$("#form1 button").on("click", function(e){
				$("#form1").hide();
				$("#form2").show();
			})
			// TODO: get price
			$("#form2 button").on("click", function(e){
				e.preventDefault();
				checkAddress().then(function(mapsResult){
					return Validations(mapsResult);
				}).then(function(result){
					return getOrder(orderId);
				}).then(function(order){
					const totalPrice = order.basePrice + order.tax + order.stripeFee + order.deliveryFee;
					$("#form2").hide();
					$("#form2").append(`<input type='hidden' name='authorized_payment' value='${totalPrice}'>`);
					handler.open({
						name: 'Burger Burger',
						description: 'Your Order',
						zipCode: true,
						amount: totalPrice
					})
				}).catch(function(fail){
					$("#form2").children(".errors").text(fail);
				})

				
			})

			// this line might let us not use set timeout
			// window.extAsyncInit = function ...

			// address validation
			function checkAddress() {
				let address = $("input[name='address']").val();
				return new Promise((resolve, reject) => {
					$.get(
					  "/address",
					  { address }
					)
						.done(function(result) {
							resolve(result); // result: true, false or error object
							console.log(result);
						})
						.fail(function(error) {
							resolve(error)
						})
				})
			}
			// not address validation
			function Validations(mapsResult) {
				return new Promise((resolve, reject) => {
					let phoneNumber = $("input[name='phoneNumber']").val();
					phoneNumber = parseInt(phoneNumber.substr(1,3) + phoneNumber.substr(6,3) + phoneNumber.substr(10,4));
					console.log(phoneNumber);
					if (mapsResult === false) { // out of range
						reject("The address is outside of range");
					} else if ((mapsResult !== true) && (mapsResult !== false)) { // error
						reject("The address is  not valid");
					} else if (isNaN(phoneNumber)) {
						reject("That phone number is not valid");
					} else if (phoneNumber <= 1000000000) {
						reject("That phone number is not valid");
					} else {
						resolve(true);					
					}
				})
			}

			function closeWebview() {
				MessengerExtensions.requestCloseBrowser(function success() {
					console.log("Webview closed");
				}, function error(err) {
					console.log(err);
				});
			}

			// gets the order
			function getOrder(id) {
				return new Promise((resolve, reject) => {
					$.get("/getorder/" + id)
						.done(function(order) {
							resolve(order);
						})
						.fail(function(error) {
							reject(error);
						})
				})
			}

			// HELPER: convert integer to cents to standard price format
			function displayPrice(price) {
				return ("$ " + (price / 100).toFixed(2));
			}

			// gets the order, then the price
			function loadPrices(order) {
				$("#base").text(displayPrice(order.basePrice));																 // base
				$("#delivery_stripe").text(displayPrice(order.stripeFee + order.deliveryFee)); // delivery + stripe
				$("#tax").text(displayPrice(order.tax));																			 // tax
				$("#total").text(displayPrice(order.basePrice + order.stripeFee + order.deliveryFee + order.tax))
				$("#final_total").text(displayPrice(order.basePrice + order.stripeFee + order.deliveryFee + order.tax))
			}

			$(document).ready(function(){

				// close the webview is order is paid or empty
				if ((!($(".item").length)) || (order_paid)) {
					(function(d, s, id){
						var js, fjs = d.getElementsByTagName(s)[0];
						if (d.getElementById(id)) {return;}
						js = d.createElement(s); js.id = id;
						js.src = "//connect.facebook.com/en_US/messenger.Extensions.js";
						fjs.parentNode.insertBefore(js, fjs);
					}(document, 'script', 'Messenger'));
					setTimeout(closeWebview, 200);
				}
				// if they already paid, close the webview (isConfirmed)

				// determine prices
				//- loadPrices();

				// format the phone number
				$("input[name='phoneNumber']").inputmask("(999) 999-9999");
			})